security:
  #   encoders:
  #     FOS\UserBundle\Model\UserInterface: sha512

  # password_hashers:
  #   App\Entity\User:
  #     algorithm: argon2i

  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    # login:
    #   pattern: ^/api/login
    #   stateless: true
    #   lazy: true
    #   provider: app_user_provider
    #   json_login:
    #     check_path: /api/login_check
    #     success_handler: lexik_jwt_authentication.handler.authentication_success
    #     failure_handler: lexik_jwt_authentication.handler.authentication_failure

    # refresh:
    #   pattern: ^/api/token/refresh
    #   stateless: true
    #   lazy: true

    # register:
    #   security: false
    #   pattern: ^/api/register
    #   stateless: true
    #   lazy: true

    # api:
    #   pattern: ^/api
    #   stateless: true
    # #   jwt: ~

    main:
      lazy: true
      provider: app_user_provider

  # access_control:
  #   - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
  #   - { path: ^/api/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
  #   - { path: ^/api/token/refresh, roles: IS_AUTHENTICATED_ANONYMOUSLY }
  #   - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
